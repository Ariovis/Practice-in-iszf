#include <iostream>
#include <string>
#include <cstring> 


int main()
{
	//STEP 1: Find coordinates

	double  v = 3, t0;
	t0 = 11 * 3600 + 50 * 60;
	int Nsat, i = 0, j = 0, k=0;

	double ef[3][5] = { {3,5,6,7,8},{2,6,8,9,2},{8,6,4,2,5} };
	Nsat = sizeof(ef) / sizeof(ef[0]);
	double** satcoord = new double*[Nsat];
	for (int i = 0; i<Nsat; i++) //create satcoord
	{
		satcoord[i] = new double[2];
	}

	for (i = 0; i < Nsat; i++) //Find coordinates of satellites
	{

		printf("Coordinates of the satellite #%d\n",i);
		satcoord[i][0] = ef[i][1] * cos(v * t0 + ef[i][5]) + ef[i][3];
		printf(" %g", satcoord[i][j]);
		satcoord[i][1] = ef[i][2] * sin(v * t0 + ef[i][5]) + ef[i][4];
		printf(" %g\n", satcoord[i][j]);
	}
	printf("\n");



	//STEP 2+3: Code generator + Correlation

	const int c = 299792458;
	int Nrec=6, Nseq, Nprn = 1, backup1, backup2,cor = 0, tau = 0;
	
	/* 
	const char *Str="111111";
	Nseq = strlen(Str);
	*/
	/*int** rec = new int* [Nsat];
	for (int i = 0; i < Nsat; i++) //create satcoord
	{
		rec[i] = new int[Nrec];
	}*/
	int  rec[6] = { -1,1,1,1,1,-1 };
	Nseq = sizeof(rec)/sizeof(rec[0]);
	int *CAcode = new int[Nseq];
	int* distance = new int[Nsat];
	int genrule[32][2] = { {2,6} ,{3,7},{4,8},{5,9},{1,9},{2,10},{1,8},{2,9},{3,10},{2,3},{3,4},{5,6},{6,7},{7,8},{8,9},{9,10},{1,4},{2,5},{3,6},{4,7},{5,8},{6,9},{1,3},{4,6},{5,7},{6,8},{7,9},{8,10},{1,6},{2,7},{3,8},{4,9} };
	for (i = 0; i < Nsat; i++) //Calculating the distance to satellite
	{
			int G1[10] = { 1,1,1,1,1,1,1,1,1,1 }, G2[10] = { 1,1,1,1,1,1,1,1,1,1 };

			for (j = 0; j < Nseq; j++) //create C/A-code
			{
				CAcode[j] = G1[9] ^ (G2[genrule[Nprn][0]] ^ G2[genrule[Nprn][1]]);
				for (k = 0; k < 10; k++) //update G1
				{
					if (k == 0)
					{
						backup1 = G1[k];
						G1[k] = G1[9] ^ G1[2];
					}
					if ((k != 0) & (k != 9))
					{
						backup2 = G1[k];
						G1[k] = backup1;
						backup1 = backup2;
					}
					if (k == 9)
					{
						G1[k] = backup1;
						backup1 = 0;
						backup2 = 0;
					}
				}
				for (k = 0; k < 10; k++) //update G2
					{
						if (k == 0)
						{
							backup1 = G2[k];
							G2[k] = (G2[5] ^ G2[7] ^ G2[8]^G2[9]) ^ (G2[1] ^ G2[2]);
						}
						if ((k != 0) & (k != 9))
						{
							backup2 = G2[k];
							G2[k] = backup1;
							backup1 = backup2;
						}
						if (k == 9)
						{
							G2[k] = backup1;
							backup1 = 0;
							backup2 = 0;
						}
					}
			}

			printf("Comparison of the C/A-code and the received code for the satellite #%d\n", i);
			for ( k = 0; k < Nseq ; k++) //replacing "0" to "-1"
			{
				if (CAcode[k] == 0) CAcode [k]= -1;
				printf(" %d", CAcode[k]);
				if (k == (Nseq - 1)) { printf("\n"); }
			} 

			for (k = 0; k < Nseq; k++)//output of the received code
			{
				printf(" %d", rec[k]);
			}
			printf("\n");

			for (j = 0; j < Nseq; j++) //preliminary correlation
			{
				cor += CAcode[j] * rec[j];
			} 
			cor = cor / Nseq;

			while (cor != 1) //Correlation
			{
				cor = 0;
				tau++;
				for (k = 0; k < Nseq; k++) //update C/A-code
				{
					
					if (k == 0)
					{
						backup1 = CAcode[k];
						CAcode[k] = CAcode[Nseq-1];
					}
					if ((k != 0) & (k != Nseq-1))
					{
						backup2 = CAcode[k];
						CAcode[k] = backup1;
						backup1 = backup2;
					}
					if (k == (Nseq-1))
					{
						CAcode[k] = backup1;
						backup1 = 0;
						backup2 = 0;
					}
				}
				for ( j = 0; j < Nseq; j++) //calculation of correlation
				{
					cor+= CAcode[j] * rec[j];
				}
				cor = cor / Nseq;
			}
			printf("Shift time = %d\n", tau);
			distance[i] = c * tau;
			printf("Distance to the satellite #%d = %d\n",i, distance[i]);
			tau = 0;
			printf("\n");
	}




	//Navigator

	double A = 0, B = 0, a1 = 0, b1 = 0, x = 0, y = 0;
	int N1=0, N2=1, N3=2;
	
	A = (distance[N1] * distance[N1] - distance[N2] * distance[N2]+ satcoord[N2][0] * satcoord[N2][0]-satcoord[N1][0]* satcoord[N1][0]+ satcoord[N2][1] * satcoord[N2][1] - satcoord[N1][1] * satcoord[N1][1])/(2*(satcoord[N2][0] - satcoord[N1][0]));
	B = (distance[N1] * distance[N1] - distance[N3] * distance[N3] + satcoord[N3][0] * satcoord[N3][0] - satcoord[N1][0] * satcoord[N1][0] + satcoord[N3][1] * satcoord[N3][1] - satcoord[N1][1] * satcoord[N1][1]) / (2 * (satcoord[N3][0] - satcoord[N1][0]));
	a1 = (satcoord[N1][1] - satcoord[N2][1]) / (satcoord[N2][0] - satcoord[N1][0]);
	b1 = (satcoord[N1][0] - satcoord[N3][0]) / (satcoord[N3][1] - satcoord[N1][1]);
	y = (A * b1 + B) / (1 - a1 * b1);
	x = A + a1 * y;
	printf("Your coordinates:\n");
	printf("    X:");
	printf("         Y:\n");
	printf("%8.5g    ",x);
	printf("%8.5g\n",y);


	
	for (i = 0; i < Nsat; i++) //delete satcoord
	{
		delete[] satcoord[i];
	}
	delete[] satcoord;
	delete[] CAcode;
	CAcode = 0;
	
}

void upseq()
{


}